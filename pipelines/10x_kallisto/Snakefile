########################################################################################################
# 10x_kallisto
#   Snakemake workflow to use kallisto/bustools to align and quantify 10x Chromium/Visium datasets
#   v1.0
#   Written by David McKellar
########################################################################################################

########################################################################################################
# Sources
#   https://www.kallistobus.tools/
########################################################################################################

import pdb
import pandas as pd
import glob

########################################################################################################
# Config file
########################################################################################################
configfile:'config.yaml'
########################################################################################################
# Directories and locations
########################################################################################################
OUTDIR = config['OUTDIR']

########################################################################################################
# Variables and references
########################################################################################################
SAMPLES = list(pd.read_csv(config['SAMPLE_SHEET'])['sampleID'])
R1_FQS = dict(zip(SAMPLES, list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R1'])))
R2_FQS = dict(zip(SAMPLES, list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R2'])))

########################################################################################################
# Executables
########################################################################################################
KB_EXEC = config['KB_EXEC']

########################################################################################################
rule all:
    input:
        expand('{OUTDIR}/{sample}/preTrim_fastqc_R2_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), # raw R2 fastQC results
        expand('{OUTDIR}/{sample}/postTrim_fastqc_R2_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), # adapter/polyA/ployG-trimmed R2 fastQC results
        expand('{OUTDIR}/{sample}/cutadapt_polyA_report.txt', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}/cutadapt_polyG_report.txt', OUTDIR=config['OUTDIR'], sample=SAMPLES), strand-split bigWigs
        expand('{OUTDIR}/{sample}/kb_wrapper/counts_unfiltered/adata.h5ad', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}/kb_standard/counts_unfiltered/genes.txt', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}/kb_standard/quant/pseudoalignments.bam', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}/kb_standard/quant/pseudoalignments_plus.bw', OUTDIR=config['OUTDIR'], sample=SAMPLES), # strand-split bigWigs
        expand('{OUTDIR}/{sample}/kb_lamanno/counts_unfiltered/adata.h5ad', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}/kb_standard/counts_unfiltered/output.mtx', OUTDIR=config['OUTDIR'], sample=SAMPLES)

#############################################
## Pre-alignment set up
#############################################
# Unzip the whitelist file if it hasn't been done yet
rule gunzipWhitelist:
    input:
        config['CB_WHITELIST']+'.gz'
    output:
        config['CB_WHITELIST']
    shell:
        """
        gunzip {input}
        """

#############################################
## Trimming and FastQC
#############################################

# Merge .fastq files (in case more than one sesquencing run was performed)
rule merge_fastqs:
    output:
        MERGED_R1_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R1.fq.gz'),
        MERGED_R2_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R2.fq.gz')
    params:
        TMP_DIR = '{OUTDIR}/{sample}/tmp',
        R1_FQ = lambda wildcards: R1_FQS[wildcards.sample],
        R2_FQ = lambda wildcards: R2_FQS[wildcards.sample]
    threads:
        config['CORES']
    run:
        if len(params.R1_FQ.split(" "))==1 & len(params.R2_FQ.split(" "))==1: # shell for single fastq input
            shell("cp {params.R1_FQ} {output.MERGED_R1_FQ}")
            shell("cp {params.R2_FQ} {output.MERGED_R2_FQ}")
        else: # shell enablinging multi-fastq input; concatenate inputs
            print("Concatenating",len(params.R1_FQ.split(" ")), ".fastq's for {wildcards.sample}")
            shell("mkdir -p {params.TMP_DIR}")
            shell("zcat {params.R1_FQ} > {params.TMP_DIR}/{wildcards.sample}_R1.fq")
            shell("zcat {params.R2_FQ} > {params.TMP_DIR}/{wildcards.sample}_R2.fq")
            shell("pigz -p {threads} {params.TMP_DIR}/*.fq")

rule preTrim_FastQC_R2:
    input:
        MERGED_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}/preTrim_fastqc_R2_out')
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.MERGED_R2_FQ}
        """

rule trimPolyA_R2:
    input:
        MERGED_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1.fq.gz',
        MERGED_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2.fq.gz'
    output:
        A_TRIMMED_R1_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R1_Atrimmed.fq.gz'),
        A_TRIMMED_R2_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R2_Atrimmed.fq.gz'),
        POLYA_REPORT = '{OUTDIR}/{sample}/cutadapt_polyA_report.txt'
    params:
        THREE_PRIME_R2_POLYA = "A"*100,
        FIVE_PRIME_R2 = "CCCATGTACTCTGCGTTGATACCACTGCTT" #10x TSO sequence
    threads:
        config['CORES']
    log:
        '{OUTDIR}/{sample}/cutadapt_polyA_report.txt'
    shell:
        """
        # TSO & polyA trimming
        cutadapt \
        --minimum-length 10 \
        -A {params.THREE_PRIME_R2_POLYA} \
 		-G {params.FIVE_PRIME_R2} \
        --pair-filter=any \
 		-o {output.A_TRIMMED_R1_FQ} \
        -p {output.A_TRIMMED_R2_FQ} \
        --cores {threads} \
        {input.MERGED_R1_FQ} {input.MERGED_R2_FQ} 1> {log}
        """

#Additional trimming step, just for 2-color Illumina chemistries (NextSeq, etc.)
rule trimPolyG_R2:
    input:
        A_TRIMMED_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_Atrimmed.fq.gz',
        A_TRIMMED_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_Atrimmed.fq.gz'
    output:
        FINAL_R1_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz'),
        FINAL_R2_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'),
        POLYG_REPORT = '{OUTDIR}/{sample}/cutadapt_polyG_report.txt'
    params:
        THREE_PRIME_R2_POLYG = "G"*100,
        FIVE_PRIME_R2 = "AAGCAGTGGTATCAACGCAGAGTACATGGG" # rev-comp of 10x TSO sequence
    threads:
        config['CORES']
    log:
        log = '{OUTDIR}/{sample}/cutadapt_polyG_report.txt'
    shell:
        """
        cutadapt \
        --minimum-length 10 \
        -A {params.THREE_PRIME_R2_POLYG} \
 		-G {params.FIVE_PRIME_R2} \
        --pair-filter=any \
 		-o {output.FINAL_R1_FQ} \
        -p {output.FINAL_R2_FQ} \
        --cores {threads} \
        {input.A_TRIMMED_R1_FQ} {input.A_TRIMMED_R2_FQ} 1> {log.log}
        """

rule postTrim_FastQC_R2:
    input:
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}/postTrim_fastqc_R2_out'),
        # fastqcReport = ''
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.FINAL_R2_FQ}
        """

rule postTrim_FastQC_R2_lengthFiltered:
    input:
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final_filtered.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}/postTrim_FastQC_R2_lengthFiltered'),
        # fastqcReport = ''
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.FINAL_R2_FQ}
        """
#############################################
## Pseudoalignment & counting
#############################################

# Make output directory, align fastqs, and generate raw/filtered feature/cell-barcode matrices
#   Info on kallisto/bustools: https://www.kallistobus.tools/
rule kb_wrapper:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        FINAL_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz',
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'
    output:
        COUNTMAT = '{OUTDIR}/{sample}/kb_wrapper/counts_unfiltered/adata.h5ad'
    params:
        OUTDIR = config['OUTDIR'],
        KB_EXEC = config['KB_EXEC'],
        KB_IDX = config['KB_IDX'],
        KB_T2G = config['KB_T2G'],
        MEMLIMIT = config['MEMLIMIT']
    log:
        '{OUTDIR}/{sample}/kb_wrapper/kb_wrapper.log'
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {params.OUTDIR}/{wildcards.sample}

        {params.KB_EXEC} count \
        -i {params.KB_IDX} \
        -g {params.KB_T2G} \
        -x 10xv3 \
        -o {params.OUTDIR}/{wildcards.sample}/kb_wrapper/ \
        -t {threads} \
        -m {params.MEMLIMIT} \
        -w {input.CB_WHITELIST} \
        --mm \
        --filter \
        --h5ad \
        --report \
        --workflow standard \
        {input.FINAL_R1_FQ} {input.FINAL_R2_FQ} > {log}
        """

# kallisto/bustools workflow (fastq to bus/txt)
rule kallisto_bus_standard:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        FINAL_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz',
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'
    output:
        BUSTEXT = temp('{OUTDIR}/{sample}/kb_standard/output.corrected.bus'),
        TRANSCRIPTS = '{OUTDIR}/{sample}/kb_standard/transcripts.txt',
        ECMAP = '{OUTDIR}/{sample}/kb_standard/matrix.ec'
    params:
        OUTDIR = config['OUTDIR'],
        KALLISTO_EXEC = config['KALLISTO_EXEC'],
        KB_IDX = config['KB_IDX'],
        CHEMISTRY = 'VISIUM',
        MEMLIMIT = config['MEMLIMIT']
    log:
        '{OUTDIR}/{sample}/kb_standard/kallisto_bus_standard.log'
    threads:
        config['CORES']
    shell:
        """
        bash scripts/kb.sh {params.OUTDIR}/{wildcards.sample}/kb_standard \
        {params.KB_IDX} \
        {input.CB_WHITELIST} \
        {params.CHEMISTRY} \
        {log} \
        {threads} \
        {params.MEMLIMIT} \
        {input.FINAL_R1_FQ} {input.FINAL_R2_FQ}
        """

rule bus2mat_standard:
    input:
        BUS = '{OUTDIR}/{sample}/kb_standard/output.corrected.bus',
        TRANSCRIPTS = '{OUTDIR}/{sample}/kb_standard/transcripts.txt',
        ECMAP = '{OUTDIR}/{sample}/kb_standard/matrix.ec'
    output:
        MAT = '{OUTDIR}/{sample}/kb_standard/counts_unfiltered/output.mtx'
    params:
        MATDIR = directory('{OUTDIR}/{sample}/kb_standard/counts_unfiltered'),
        OUTDIR = config['OUTDIR'],
        BUST_EXEC = config['BUST_EXEC'],
        KB_T2G = config['KB_T2G']
    threads:
        1
    shell:
        """
        mkdir -p {params.MATDIR}

        {params.BUST_EXEC} count \
        --output {params.MATDIR}/ \
        --genemap {params.KB_T2G} \
        --ecmap {input.ECMAP} \
        --txnames {input.TRANSCRIPTS} \
        --genecounts \
        --umi-gene \
        --em \
        {input.BUS}
        """

rule kallisto_quant_standard:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        FINAL_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz',
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'
    output:
        GENOMEBAM = '{OUTDIR}/{sample}/kb_standard/quant/pseudoalignments.bam'
    params:
        OUTDIR = config['OUTDIR'],
        KALLISTO_EXEC = config['KALLISTO_EXEC'],
        KB_IDX = config['KB_IDX'],
        MEMLIMIT = config['MEMLIMIT'],
        GENES_GTF = config['GENES_GTF'],
        CHROMOSOMES = config['CHROMOSOMES']
    log:
        '{OUTDIR}/{sample}/kb_standard/kallisto_quant_standard.log'
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {params.OUTDIR}/{wildcards.sample}/kb_standard/quant

        {params.KALLISTO_EXEC} quant \
        -i {params.KB_IDX} \
        -o {params.OUTDIR}/{wildcards.sample}/kb_standard/quant/ \
        -t {threads} \
        --fr-stranded \
        --single \
        -l 85 \
        -s 10 \
        --genomebam \
        --chromosomes {params.CHROMOSOMES} \
        --gtf {params.GENES_GTF} \
        {input.FINAL_R2_FQ}
        """

##############################
# RNA velocity pseudoalignment
##############################

rule kb_lamanno:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        FINAL_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz',
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'
    output:
        COUNTMAT = '{OUTDIR}/{sample}/kb_lamanno/counts_unfiltered/adata.h5ad'
    params:
        OUTDIR = config['OUTDIR'],
        KB_EXEC = config['KB_EXEC'],
        KBL_IDX = config['KBL_IDX'],
        KBL_T2G = config['KBL_T2G'],
        KBL_CDNA_T2C = config['KBL_CDNA_T2C'],
        KBL_INTRON_T2C = config['KBL_INTRON_T2C'],
        UMIlen = config['UMIlen'],
        MEMLIMIT = config['MEMLIMIT']
    log:
        '{OUTDIR}/{sample}/kb_lamanno/kallisto_lamanno.log'
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {params.OUTDIR}/{wildcards.sample}

        {params.KB_EXEC} count \
        -i {params.KBL_IDX} \
        -g {params.KBL_T2G} \
        -x 10xv3 \
        -o {params.OUTDIR}/{wildcards.sample}/kb_lamanno/ \
        -t {threads} \
        -m {params.MEMLIMIT} \
        -w {input.CB_WHITELIST} \
        --mm \
        --filter \
        --h5ad \
        --report \
        --workflow lamanno \
        -c1 {params.KBL_CDNA_T2C} \
        -c2 {params.KBL_INTRON_T2C} \
        {input.FINAL_R1_FQ} {input.FINAL_R2_FQ} > {log}
        """

#############################################
## Additional files for visualization
#############################################

rule bamToSplitBigWig:
    input:
        BAM = '{OUTDIR}/{sample}/kb_standard/quant/pseudoalignments.bam',
        BAI = '{OUTDIR}/{sample}/kb_standard/quant/pseudoalignments.bam.bai'
    output:
        POS_BW = '{OUTDIR}/{sample}/kb_standard/quant/pseudoalignments_plus.bw',
        MERGED_BW = '{OUTDIR}/{sample}/kb_standard/quant/pseudoalignments_merged.bw'
    params:
        BAM2SPLITBW=config['BAM2SPLITBW'],
        CHROMOSOMES = config['CHROMOSOMES'],
        OUTPUT_DIR = '{OUTDIR}/{sample}/kb_standard/quant/'
    threads:
        config['CORES']
    shell:
        """
        {params.BAM2SPLITBW} {input.BAM} {threads} {params.OUTPUT_DIR} {params.CHROMOSOMES}
        """

rule bamToSplitBigWig_k11:
    input:
        BAM = '{OUTDIR}/{sample}/kb_standard_k11/quant/pseudoalignments.bam',
        BAI = '{OUTDIR}/{sample}/kb_standard_k11/quant/pseudoalignments.bam.bai'
    output:
        POS_BW = '{OUTDIR}/{sample}/kb_standard_k11/quant/pseudoalignments_plus.bw',
        MERGED_BW = '{OUTDIR}/{sample}/kb_standard_k11/quant/pseudoalignments_merged.bw'
    params:
        BAM2SPLITBW=config['BAM2SPLITBW'],
        CHROMOSOMES = config['CHROMOSOMES'],
        OUTPUT_DIR = '{OUTDIR}/{sample}/kb_standard_k11/quant/'
    threads:
        config['CORES']
    shell:
        """
        {params.BAM2SPLITBW} {input.BAM} {threads} {params.OUTPUT_DIR} {params.CHROMOSOMES}
        """
