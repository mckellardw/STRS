########################################################################################################
# sp_mirge3
#   Snakemake workflow to quantify small RNAs in spatial RNAseq data with mirge3.0
#   v1.0
#   Written by David McKellar
#   Last edited:  / / , DWM
########################################################################################################

# import pdb
# import pandas as pd
# import glob
import numpy as np

########################################################################################################
# Config file
########################################################################################################
configfile:'config.yaml'
########################################################################################################
# Directories and locations
########################################################################################################
TMPDIR = config['TMPDIR']
OUTDIR = config['OUTDIR']

########################################################################################################
# Variables and references
########################################################################################################
BARCODES = np.loadtxt(config['BARCODE_LIST'],dtype="str").tolist()

########################################################################################################
rule all:
    input:
        expand('{OUTDIR}/{SAMPLE}/{BARCODE}/min10/miR.Counts.csv', OUTDIR=config['OUTDIR'], SAMPLE=config['SAMPLE'], BARCODE=BARCODES)
        # expand('{OUTDIR}/{SAMPLE}/{BARCODE}/subset_R2.fastq', OUTDIR=config['OUTDIR'], SAMPLE=config['SAMPLE'], BARCODE=BARCODES)

#############################################
## Pre-alignment set up
#############################################


# Take the input .bam file (deduplicated and containing corrected spot barcodes) and split it by spot into sam files
rule split_bam_by_CB:
    output:
        # CB_SAM = temp('{OUTDIR}/{SAMPLE}/{BARCODE}/subset.sam')
        CB_FQ = '{OUTDIR}/{SAMPLE}/{BARCODE}/subset_R2.fastq'
    params:
        TMP_DIR = '{OUTDIR}/{SAMPLE}/{BARCODE}/tmp',
        STARBAM = config['STARBAM'],
        SAMTOOLS_EXEC =  config['SAMTOOLS_EXEC']
    threads:
        1
    shell:
        """
        {params.SAMTOOLS_EXEC} view \
        --tag CB:{wildcards.BARCODE} \
        -b -1 \
        {params.STARBAM} \
        | {params.SAMTOOLS_EXEC} fastq \
        -2 {output.CB_FQ} > {output.CB_FQ}
        """

#############################################
## miRge3.0 analysis
#############################################
rule miRge3:
    input:
        CB_FQ = '{OUTDIR}/{SAMPLE}/{BARCODE}/subset_R2.fastq'
    output:
        MIRGE_COUNTS = '{OUTDIR}/{SAMPLE}/{BARCODE}/min10/miR.Counts.csv'
        # MIRGE_CHECK= '{OUTDIR}/{SAMPLE}/{BARCODE}/miRge_check.txt'
    params:
        OUTDIR = config['OUTDIR'],
        MIRGE_DIR = directory('{OUTDIR}/{SAMPLE}/{BARCODE}/'),
        MIRGE_EXEC = config['MIRGE_EXEC'],
        MIRGE_LIB = config['MIRGE_LIB'],
        SPECIES = config['SPECIES'],
        MINLENGTH = 10,
        MEMLIMIT = config['MEMLIMIT']
    threads:
        config['CORES']
    shell:
        """
        {params.MIRGE_EXEC} \
        -s {input.CB_FQ} \
        -lib {params.MIRGE_LIB} \
        -on {params.SPECIES} \
        -db mirbase \
        --minimum-length {params.MINLENGTH} \
        -o {params.MIRGE_DIR} \
        --threads {threads}

        mv --backup=numbered {params.MIRGE_DIR}/miRge*/* {params.MIRGE_DIR}/min{params.MINLENGTH}
        """
